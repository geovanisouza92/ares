/* module IdeaCloud.Vistem
    class Base
    private # change visibility for section
        def GetId(): Integer
        {
            # { getter
        }
    public
        attr Id: Integer ;
    private
        def SetId(Value: Integer) # the order doesn't matter...
        {
           # { setter
        } ## Comment block
    }
    class Cliente > Base # heritance from "Base" class
    private
        # general validations here
    public
        attr Name: String ; # invariants not nil; # read-only, with constance
        def Update()
        {
            # update
            if "blue" == Sky.Color then
            {

            }
            case Sky.Color
                when "blue" do
                    print("Uau!");
                when "red" do
                    print("Oh not!");
                when "yellow" do
                    print("Superman will lose his powers!");
            }
        }
        private
        def Save() # visibility for def, only
        require # pre-conditions here
            print(Self.Valid?);
        { # { of significant code
            # { something
            # bellow a "query expression", that take an collection (one def,
            # in this case), perform conditions to return a set.
            var a = from person in Persons # Persons def return an array
                     where person.Age > 18
                     select person;
            var b = "Teste";
        # except
            # catch exceptions
        # finally
            # execute at finalization of def
        ensure # post-conditions here
            Self.Valid?;
        }
    }
} */
